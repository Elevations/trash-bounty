@page "/register"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    .main {
        width: 100vw;
        min-height: calc(100vh - 64px); /* Full page height minus nav bar */
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .form-input {
        margin-bottom: 32px;
        position: relative;
    }

    .form-input input {
        display: block;
        border: none;
        font-size: 24px;
        border-bottom: 2px solid #238531;
        font-family: 'Public Sans', sans-serif;
        box-shadow: none !important;
        transition: 0.3s;
    }

    .form-input input.invalid {
        border-bottom: 2px solid #ff4d4d;
    }

    input[type="submit"] {
        border: 4px solid #238531;
        border-radius: 64px;
        background-color: #fff;
        color: #238531;
        font-size: 1rem;
        padding: 16px;
        margin-top: 16px;
        transition: 0.3s;
        box-shadow: 0 1px 3px rgba(0, 0, 0, .25);
        cursor: pointer;
    }

    input[type="submit"]:hover {
        background-color: #238531;
        color: #fff;
        box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
    }

    .form-input label {
        display: block;
        font-family: 'Public Sans', sans-serif;
        color: #ccc;
    }

    .form-input .validation-message {
        font-family: 'Public Sans', sans-serif;
        color: #ff4d4d;
        position: absolute;
        bottom: -20px; /* 16 for the font height and 4 for padding */
        white-space: nowrap;
        animation: fadein 0.3s ease forwards;
    }

    ::placeholder {
        color: #ccc;
    }

    @@keyframes fadein {
        0% {opacity: 0;}
        100% {opacity: 1;}
    }
</style>

<h1>Sign up</h1>
<p>Already have an account? <a href="/login">Log in</a></p>
<EditForm model="@user" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />
    <div class="form-input">
        <label for="email">Email</label>
        <InputText id="email" type="email" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="form-input">
        <label for="username">Username</label>
        <InputText id="username" type="text" @bind-Value="user.Username" />
        <ValidationMessage For="@(() => user.Username)" />
    </div>
    <div class="form-input">
        <label for="pwd1">Enter a password</label>
        <InputText id="pwd1" type="password" @bind-Value="user.Password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="form-input">
        <label for="pwd2">Confirm your password</label>
        <InputText id="pwd2" type="password" @bind-Value="user.PasswordConfirm" />
        <ValidationMessage For="@(() => user.PasswordConfirm)" />
    </div>
    <input type="submit" value="Register" />
</EditForm>

@code
{
    private NewUser user = new NewUser();

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:44399/api/users", user);

        var jsonString = await response.Content.ReadAsStringAsync();
        TrashBountyLib.Models.Results.RegisterResult result = JsonConvert.DeserializeObject<TrashBountyLib.Models.Results.RegisterResult>(jsonString);

        if (result.Successful)
        {
            Console.WriteLine("User Registered");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Console.WriteLine(error);
            }
        }
    }
}